#!/bin/bash

# File and Directory location lists
	## NodeJS Version 6.5
		_node_ver="https://nodejs.org/dist/latest-v6.x/node-v6.11.0-linux-armv6l.tar.xz"
		_node_file="node-v6.11.0-linux-armv6l.tar.xz"
	## NodeJS install Directory
		_node_dir="/usr/local"
	## HomeBridge user service run as
		_username="root"
	## Homebridge Service file - homebridge.service
		_service_file_template="homebridge_service"
		_service_file="/etc/systemd/system/homebridge.service"
	## HomeBridge systemd defaults file
		_service_default_file_template="homebridge_service_defaults"
		_service_default_file="/etc/default/homebridge"
	## HomeBridge base service folder
		_homebridge_base="/var/lib/homebridge"
	## HomeBridge config.json file
		_config_json_tmp="config.raw"
		_config_json="${_homebridge_base}/config.json"
	## homebridge-cmdaccessory command folders
		_cmdaccessory_cmdlets="${_homebridge_base}/cmdlets"

# Test if superuser
	_su_test() {
		# Script must be run as root
		if [ "$EUID" -ne 0 ]; then
			_error "Permissions issue"
			_note "Please run as root or with sudo"
			exit
		fi
	}
# Set Colors
	_set_colors() {
		reset=$(echo -en '\033[0m')
		red=$(echo -en '\033[00;31m')
		green=$(echo -en '\033[00;32m')
		yellow=$(echo -en '\033[00;33m')
		blue=$(echo -en '\033[00;34m')
		magenta=$(echo -en '\033[00;35m')
		purple=$(echo -en '\033[00;35m')
		cyan=$(echo -en '\033[00;36m')
		lightgray=$(echo -en '\033[00;37m')
		lred=$(echo -en '\033[01;31m')
		lgreen=$(echo -en '\033[01;32m')
		lyellow=$(echo -en '\033[01;33m')
		lblue=$(echo -en '\033[01;34m')
		lmagenta=$(echo -en '\033[01;35m')
		lpurple=$(echo -en '\033[01;35m')
		lcyan=$(echo -en '\033[01;36m')
		white=$(echo -en '\033[01;37m')
	}
# Set Print formatting
	## Header
		_header() {
			printf "\n${lcyan}==========  %s  ==========${reset}\n" "$@"
		}
	## Menu selection
		_select() {
			printf "${lgreen}%s${reset}\n" "$@"
		}
	## Seperator
		_sep() {
			printf "\n${lpurple}========================================${reset}\n" "$@"
		}
	## Successful Command
		_success() {
			printf "${green}✔ %s${reset}\n" "$@"
		}
	## Error
		_error() {
			printf "${red}✖ %s${reset}\n" "$@"
		}
	## Successful Removal
		_removed() {
			printf "${green}✖ %s${reset}\n" "$@"
		}
	## Warning
		_warning() {
			printf "${yellow}➜ %s${reset}\n" "$@"
		}
	## Note
		_note() {
			printf "${lyellow}Note:${reset}  ${lyellow}%s${reset}\n" "$@"
		}
# Null responce check
	_ans_check() {
		while [ -z "${_ans}" ]; do
			_error "null string"
			_header "Re enter value"
			read _ans
		done
	}
# Update apt cache and upgrade
	_base_update() {
		_header "Updating apt cache"
		sudo apt-get update > /dev/null
		_header "Updating apt cache - Done!"
		_header "Upgrading System"
		sudo apt-get upgrade -y > /dev/null
		_header "Upgrading System - Done!"
	}
# Menu List Function
	menu_list_template() {
		count=1
		for c0 in "${l0[@]}"
		do
			a0[$count]=$c0
			_select "$count - ${a0[$count]}"
			((count++))
		done
		read c1
		if [[ $c1 = [a-Z] ]]; then
			_error "Bad Input - no donut"
			return 1
		fi
		MENU_COUNT=${c1}
		MENU_OUTPUT=${a0[$c1]}
		opt_count=( `expr ${MENU_COUNT} - 1` )
	}
# Command to run from menu command array
	menu_command_run() {
		${opt0[$opt_count]}
	}
# Generic Base Menu Function
	g_menu_fn() {
		while :
		do
			_header ${HEADING}
			if [ "${ERR_MSG} != """ ]; then
				_warning "ERROR: ${ERR_MSG}"
			fi
			## Reset Error MSG
				ERR_MSG="What you talkin' 'bout Willis!!!!!'"
			## Generate menu list from menu options array
				menu_list_template
			## Run choosen command from menu command array
				menu_command_run
		done
	}
# Install Dependencies
	_depends_install() {
		## depends_install_list
			depends_install_list=(
				libavahi-compat-libdnssd-dev
				wget
				make
				bc
				wiringpi
			)
		## Install dependencies
			for i in "${depends_install_list[@]}"; do
				_header "Installing Dependency - $i"
				sudo apt-get install -y $i  > /dev/null
				_success $i
			done
	}
# Existing System Service Check, Stop, and Removal
	_system_services_remove() {
		## Stop and disable existing services
		if [ $(sudo ps -aux | grep -c '^homebridge') = 1 ]; then
			_header "Stopping and removing HomeBridge Services"
			sudo systemctl stop homebridge
			sudo systemctl disable homebridge
			sudo systemctl daemon-reload
			_removed "Stopping and removing HomeBridge Services - Done!"
		fi
		## Remove Existing server file
		if [ -e ${_service_file} ]; then
			_header "Removing Existing server file - ${_service_file}"
			sudo rm -rf ${_service_file}
			_removed "Removed Existing server file - ${_service_file}"
		fi
		## Remove Existing Service Default file
		if [ -e ${_service_default_file} ]; then
			_header "Removing Existing Service Default file - ${_service_default_file}"
			sudo rm -rf ${_service_default_file}
			_removed "Removed Existing Service Default file - ${_service_default_file}"
		fi
	}
# Install NodeJS
	_node_install() {
		## Download NodeJS and extract
			_header "Downloading ${_node_ver}"
			wget -q ${_node_ver}
			_success "Downloaded ${_node_ver}"
			## Moving NodeJS to system dir
			_header "Moving ${_node_file} to ${_node_dir}"
			sudo mv ${_node_file} ${_node_dir}
			_success "Moved ${_node_file} to ${_node_dir}"
			## Extracting NodeJS to system dir
			_header "Extracting ${_node_file} to ${_node_dir}"
			tar xJf ${_node_file} --strip=1
			_success "${_node_file} Extracted"
		## remove tmp files / folders
			_header "Removing tmp file : ${_node_file}"
			sudo rm -rf ${_node_file}
			_removed "Removed - ${_node_file}"
	}
# Install HomeBridge
	_node_setup() {
		## List of nodes to install
			node_list=(
				homebridge@latest
				homebridge-server@latest
			)
		## Install nodes
			for i in "${node_list[@]}"; do
				_header "Installing $i"
				sudo npm install -g --unsafe-perm --silent $i > /dev/null
				_success $i
			done
		## Create Symbolic Links
			#_header "Creating symbolic link to /usr/bin/homebridge"
			#sudo update-alternatives --install "/usr/bin/homebridge" "homebridge" "${_node_dir}/lib/node_modules/homebridge/bin/homebridge" 1
			#_success "homebridge"
		## Create HomeBridge working directory
			_header "Create HomeBridge Var Directory"
			sudo mkdir -p ${_homebridge_base}
			_success ${_homebridge_base}
	}
	# Install HomeBridge extra / dependencies
		_node_dependencies_setup() {
			## List of nodes to install
				node_list=(
					homebridge-gpio-wpi2@latest
					homebridge-cmdaccessory@latest
				)
			## Install nodes
				for i in "${node_list[@]}"; do
					_header "Installing $i"
					sudo npm install -g --silent $i > /dev/null
					_success $i
				done
		}

# HomeBridge User Setup
	#_homebridge_user_setup() {
	#  if [ $(getent passwd ${_username}) ]; then
	#    echo "${_username} exists....."
	#  else
	#    # Create user
	#    sudo useradd -M --system ${_username}
	#    # Add homebridge user to the gpio group
	#    sudo usermod -G gpio ${_username}
	#  fi
	#}
# HomeBridge systemd service setup
	_homebridge_service_setup() {
			_header "Installing Service : ${_service_file}"
		## Service File list
			_service_file_list=(
				"[Unit]"
				"Description=Node.js HomeKit Server"
				"After=syslog.target network-online.target"
				"[Service]"
				"Type=simple"
				"EnvironmentFile=/etc/default/homebridge"
				"ExecStart=/usr/bin/homebridge \$HOMEBRIDGE_OPTS"
				"Restart=on-failure"
				"RestartSec=10"
				"KillMode=process"
				"[Install]"
				"WantedBy=multi-user.target"
			)
		## Create Service file
			_header "Installing ${_service_file_list}"
			for i in "${_service_file_list[@]}"; do
				sudo echo $i >> ${_service_file}
			done
			_success "Installed ${_service_file}"
		## Show Service File
			_note ${_service_file}
			_sep
			cat ${_service_file}
			_sep
	}
# HomeBridge service defaults config
	_homebridge_defaults_setup() {
		## Stop existing service
			_system_services_remove
		## Run service config install
			_homebridge_service_setup
		## Service Defaults List
			_service_defaults_list=(
				"# Defaults / Configuration options for homebridge"
				"HOMEBRIDGE_OPTS=\"-U /var/lib/homebridge\""
				"# If you uncomment the following line, homebridge will log more"
				"# You can display this via systemd's journalctl: journalctl -f -u homebridge"
				"# DEBUG=*"
			)
		## Create service defaults file - source homebridge_defaults.conf @ homebridge_defaults_list
			_header "Installing Service Defaults - ${_service_default_file}"
			for i in "${_service_defaults_list[@]}"; do
				sudo echo $i >> ${_service_default_file}
			done
			_success "Install ${_service_default_file}"
		## Show service defaults file
			_sep
			cat ${_service_default_file}
			_sep
		## Setting permissions - HomeBridge service
			_header "Setting default permissions on files and folders"
			_header ${_service_file}
			sudo chown ${_username}:${_username} ${_service_file}
			sudo chmod 644 ${_service_file}
			_success ${_service_file}
		## Seting permissions - HomeBridge service defaults
			_header  ${_service_default_file}
			sudo chown ${_username}:${_username} ${_service_default_file}
			sudo chmod 644 ${_service_default_file}
			_success ${_service_default_file}
	}
# Install cmdlets scripts
	_faac_door_scripts_install() {
		## Files to be created
			_file1="door_open.sh"
			_file2="door_close.sh"
		## Make cmdlets Directory
			sudo mkdir ${_cmdaccessory_cmdlets}
		## open door script template
			_list0=(
				"#!/bin/bash"
				"gpio -p write 200 1"
				"sleep 2"
				"gpio -p write 200 0"
			)
		## Install open door script
			_header "Installing FAAC door scripts : ${_cmdaccessory_cmdlets}/${_file1}"
			for i in "${_list0[@]}"; do
				sudo echo $i >> ${_cmdaccessory_cmdlets}/${_file1}
			done
			_success ${_cmdaccessory_cmdlets}/${_file1}
		## Show open door script
			_sep
			cat ${_cmdaccessory_cmdlets}/${_file1}
			_sep
		## close door script template
			_list0=(
				"#!/bin/bash"
				"gpio -p write 200 1"
				"sleep 2"
				"gpio -p write 200 0"
			)
		## Install close door script
			_header "Installing FAAC door scripts : ${_cmdaccessory_cmdlets}/${_file2}"
			for i in "${_list0[@]}"; do
				sudo echo $i >> ${_cmdaccessory_cmdlets}/${_file2}
			done
			_success ${_cmdaccessory_cmdlets}/${_file2}
		## Show close door script
			_sep
			cat ${_cmdaccessory_cmdlets}/${_file2}
			_sep
		## Set permissions on open door script
			_header "Setting +x permission : ${_cmdaccessory_cmdlets}/${_file1}"
			sudo chmod +x ${_cmdaccessory_cmdlets}/${_file1}
			_success "+x permission - ${_cmdaccessory_cmdlets}/${_file1}"
		## Set permissions on close door script
			_header "Setting +x permission : ${_cmdaccessory_cmdlets}/${_file2}"
			sudo chmod +x ${_cmdaccessory_cmdlets}/${_file2}
			_success "+x permission - ${_cmdaccessory_cmdlets}/${_file2}"
		## Create symbolic links on open door script
			_header "Creating symbolic links to /usr/bin - ${_cmdaccessory_cmdlets}/${_file1}"
			sudo update-alternatives --install "/usr/bin/${_file1}" "${_file1}" "${_cmdaccessory_cmdlets}/${_file1}" 1
			_success "symbolic links - ${_cmdaccessory_cmdlets}${_file1}"
		## Create symbolic links on closed door script
			_header "Creating symbolic links to /usr/bin - ${_file2}"
			sudo update-alternatives --install "/usr/bin/${_file2}" "${_file2}" "${_cmdaccessory_cmdlets}/${_file2}" 1
			_success "symbolic links - ${_cmdaccessory_cmdlets}/${_file2}"
	}
# HomeBridge Node Name
	_homebridge_node_name() {
		_header "Enter name for Node"
		read _ans
		_ans_check
		_node_name="${_ans}"
		_success "${_node_name}"
	}
# HomeBridge Node Description
	_homebridge_node_description() {
		_header "Enter description for Node"
		read _ans
		_ans_check
		_node_description="${_ans}"
		_success "${_node_description}"
	}
# HomeBridge Node Manufacturer
	_homebridge_node_manufacturer() {
		_header "Enter Manufacturer for Node"
		read _ans
		_ans_check
		_node_manufacturer="${_ans}"
		_success "${_node_manufacturer}"
	}
# HomeBridge Node Device Name
	_homebridge_node_device_name() {
		_header "Enter Device Name for Node"
		read _ans
		_ans_check
		_node_device_name="${_ans}"
		_success "${_node_device_name}"
	}
# HomeBridge Random Username
	_homebridge_username_create_fn() {
		## Define random ranges
			RANGE=255
			number=$RANDOM
			numbera=$RANDOM
			numberb=$RANDOM
			let "number %= $RANGE"
			let "numbera %= $RANGE"
			let "numberb %= $RANGE"
		## Base octet for file
			octets='00:60:2F'
		## Random base16 creation
			octeta=`echo "obase=16;$number" | bc`
			octetb=`echo "obase=16;$numbera" | bc`
			octetc=`echo "obase=16;$numberb" | bc`
		## Show Homebridge User Name
			_homebridge_username="${octets}:${octeta}:${octetb}:${octetc}"
			_header "Generating HomeBridge Usename"
			_warning ${_homebridge_username}
	}
# HomeBridge Random Port generator
	_homebridge_random_port_fn() {
		## Generate random port
			_homebridge_rport=(`shuf -i 40000-65000 -n 1`)
		## Show random port
			_header "Randomizing port"
			_warning ${_homebridge_rport}
	}
# HomeBridge Server Random Port generator
	_homebridge_server_random_port_fn() {
		## Generate random port
			_homebridge_server_rport=(`shuf -i 40000-65000 -n 1`)
		## Show random port
			_header "Randomizing port"
			_warning ${_homebridge_server_rport}
	}
# Random access code generator
	_homebridge_pin_code_fn() {
		## Generate (8) random numbers for HomeBridge pin
			a=`echo $((1 + RANDOM % 9))`
			b=`echo $((1 + RANDOM % 9))`
			c=`echo $((1 + RANDOM % 9))`
			d=`echo $((1 + RANDOM % 9))`
			e=`echo $((1 + RANDOM % 9))`
			f=`echo $((1 + RANDOM % 9))`
			g=`echo $((1 + RANDOM % 9))`
			h=`echo $((1 + RANDOM % 9))`
		## Assemble and format numbers
			_homebridge_pin_code="${a}${b}${c}-${d}${e}-${f}${g}${h}"
		## Show HomeBridge random pin
			_header "Generating HomeBridge access code"
			_warning ${_homebridge_pin_code}
	}
# HomeBridge config.json setup check
	_config_json_setup_check() {
		## Stop existing HomeBridge service
			if [ $(sudo ps -aux | grep -c '^homebridge') = 1 ]; then
				_header "Stopping and removing HomeBridge Services"
				sudo systemctl stop homebridge
				_removed "Stopping HomeBridge Services - Done!"
			fi
		## Remove existing HomeBridge config.tmp
			if [ -e ${_config_json_tmp} ]; then
				_header "Removing" ${_config_json_tmp}
				sudo rm -rf ${_config_json_tmp}
				_removed "Removed" ${_config_json_tmp}
			fi
		## Remove existing HomeBridge config.json
			if [ -e ${_config_json} ]; then
				_header "Removing" ${_config_json}
				sudo rm -rf ${_config_json}
				_removed "Removed" ${_config_json}
			fi
	}
# HomeBridge config.json Create
	_create_json_file() {
		## base json config
			_json_config_list=(
			"{"
			"\"bridge\" : {"
			"\"username\" : \"${_homebridge_username}\","
			"\"name\" : \"${_node_name}\","
			"\"pin\" : \"${_homebridge_pin_code}\","
			"\"port\" : \"${_homebridge_rport}\""
			"},"
			"\"platforms\" : ["
			"{"
			"\"port\" : \"${_homebridge_server_rport}\","
			"\"restart\" : \"sudo systemctl restart homebridge\","
			"\"name\" : \"Homebridge Server\","
			"\"log\" : \"systemd\","
			"\"platform\" : \"Server\""
			"}"
			"]"
			"}"
			)
		## Create the json config file
			_header "Creating tmp config : ${_config_json_tmp}"
			for i in "${_json_config_list[@]}"; do
				sudo echo $i >> ${_config_json_tmp}
			done
			_success "Created tmp config : ${_config_json_tmp}"
			_header "Preforming cleanup - ${_config_json_tmp} to ${_config_json}"
			sudo cat ${_config_json_tmp} | python -m json.tool > ${_config_json}
			sudo rm -rf ${_config_json_tmp}
			_success "Created ${_config_json}"
	}
# HomeBridge config.json setup
	_config_json_setup() {
		## Install command line scripts
		#	_faac_door_scripts_install
		## Check for existing install
			_config_json_setup_check
		## HomeBridge Node Name
		#	_homebridge_node_name
		## HomeBridge Node Description
			_homebridge_node_description
		## HomeBridge Node Manufacturer
			_homebridge_node_manufacturer
		## HomeBridge Node Device Name
			_homebridge_node_device_name
		## Create Random Username
			_homebridge_username_create_fn
		## Create random Port
			_homebridge_random_port_fn
		## Create random Port
			_homebridge_server_random_port_fn
		## Create randon pin
			_homebridge_pin_code_fn
		## call edit_json.sh to process the json file
			_create_json_file
		## Show HomeBridge config json
			_note ${_config_json}
			_sep
			cat  ${_config_json}
			_sep
			_success  ${_config_json}
		## Change ownership on HomeBridge config folder and children
			_header "Changing owner and group to ${username}:${username} on ${_homebridge_base} and children"
			sudo chown -R ${_username}:${_username} ${_homebridge_base}
			_success "Changed ownership"
		## Set permissions on HomeBridge folder and children
			sudo chmod -R 755 ${_homebridge_base}
			_success "Changed Permissions"
	}
# Start systemd services
	_start_homebridge_fn() {
		## Reload systemd daemon
			_header "Reloading systemd daemon"
			sudo systemctl daemon-reload
			_success "systemd daemon reloaded"
		## Enable HomeBridge service
			_header "Enabling HomeBridge service"
			sudo systemctl enable homebridge
			_success "HomeBridge Enabled"
		## Start HomeBridge service
			_header "Starting HomeBridge"
			sudo systemctl restart homebridge
			_success "HomeBridge started"
	}
# Show HomeBridge service status
	_service_status() {
		## Show HomeBridge service status
			_header "HomeBridge Status"
			sudo systemctl status -l homebridge
			_success "HomeBridge Running....."
	}
# Reset system and reinstall everything
	_system_reset() {
		_depends_install
		_node_setup
		_homebridge_defaults_setup
		_config_json_setup
		_start_homebridge_fn
		_service_status
	}
# Main Menu
	main_menu()  {
		## Header
			HEADING="HomeBridge"
		## Write out the menu options array
			### Use Double Quotes for Text
				l0=(
					"Update Raspbian-Lite"
					"(RE)install Dependencies"
					"NodeJS install"
					"Install Homebridge"
					"(RE)install systemd Homebridge service files"
					"(RE)install HomeBridge config.json"
					"(RE)start HomeBridge services"
					"Show Service Status"
					"Complete (RE)install"
					"Exit"
					"Exit and Reboot"
				)
		## Map Menu to command Array
			### Use Single Quotes for Commands
				opt0=(
					'_base_update'
					'_depends_install'
					'_node_install'
					'_node_setup'
					'_homebridge_defaults_setup'
					'_config_json_setup'
					'_start_homebridge_fn'
					'_service_status'
					'_system_reset'
					'exit'
					'sudo reboot'
					)
		## Execute Menu Function
			g_menu_fn
	}
# Execute set color function
 _set_colors
# Execute super user test
 _su_test
# Execute main menu
	main_menu
